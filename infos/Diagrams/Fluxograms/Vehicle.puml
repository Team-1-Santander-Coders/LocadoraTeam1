@startuml

start

:Início do Processo;

partition "VehicleService" {
    :Receber dados do veículo;
    :Adicionar veículo;
    -> VehicleRepository;
    :Chamar save(vehicleDTO);
}

partition "VehicleRepository" {
    :Verificar se já existe veículo com a mesma placa;
    if (Veículo existe?) then (sim)
        :Lançar DuplicateEntityException;
    else (não)
        :Salvar veículo no repositório;
        :Escrever em vehicles.dat;
    endif
}

:Retornar sucesso ao VehicleService;

partition "VehicleService" {
    :Recuperar todos os veículos;
    -> VehicleRepository;
    :Chamar findAll();
}

partition "VehicleRepository" {
    :Ler dados de vehicles.dat;
    :Retornar lista de veículos;
}

:Mostrar lista de veículos;

partition "VehicleService" {
    :Atualizar detalhes do veículo;
    -> VehicleRepository;
    :Chamar update(updatedVehicleDTO);
}

partition "VehicleRepository" {
    :Localizar veículo pelo placa;
    if (Veículo encontrado?) then (sim)
        :Atualizar dados do veículo;
        :Escrever em vehicles.dat;
    else (não)
        :Lançar EntityNotFoundException;
    endif
}

:Retornar sucesso ao VehicleService;

partition "VehicleService" {
    :Alugar veículo;
    -> VehicleRepository;
    :Chamar update(rentedVehicleDTO);
}

partition "VehicleRepository" {
    :Atualizar status de disponibilidade;
    :Escrever em vehicles.dat;
}

:Retornar sucesso ao VehicleService;

partition "VehicleService" {
    :Devolver veículo;
    -> VehicleRepository;
    :Chamar update(returnedVehicleDTO);
}

partition "VehicleRepository" {
    :Atualizar status de disponibilidade;
    :Escrever em vehicles.dat;
}

:Retornar sucesso ao VehicleService;

:Encerrar Processo;

stop

@enduml
